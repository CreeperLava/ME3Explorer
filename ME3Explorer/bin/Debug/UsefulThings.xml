<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UsefulThings</name>
    </assembly>
    <members>
        <member name="T:UsefulThings.Extensions">
            <summary>
            Extension methods for various things, both WPF and WinForms
            </summary>
        </member>
        <member name="M:UsefulThings.Extensions.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:UsefulThings.Extensions.InvokeIfRequired(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            A simple WPF threading extension method, to invoke a delegate
            on the correct thread if it is not currently on the correct thread
            Which can be used with DispatcherObject types
            </summary>
            <param name="disp">The Dispatcher object on which to do the Invoke</param>
            <param name="dotIt">The delegate to run</param>
            <param name="priority">The DispatcherPriority</param>
        </member>
        <member name="M:UsefulThings.Extensions.ReadStreamFully(System.IO.Stream,System.Int32)">
            <summary>
            KFreon: Borrowed this from the DevIL C# Wrapper found here: https://code.google.com/p/devil-net/
            
            Reads a stream until the end is reached into a byte array. Based on
            <a href="http://www.yoda.arachsys.com/csharp/readbinary.html">Jon Skeet's implementation</a>.
            It is up to the caller to dispose of the stream.
            </summary>
            <param name="stream">Stream to read all bytes from</param>
            <param name="initialLength">Initial buffer length, default is 32K</param>
            <returns>The byte array containing all the bytes from the stream</returns>
        </member>
        <member name="M:UsefulThings.Extensions.AddRangeKinda``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add range of elements to given collection.
            </summary>
            <typeparam name="T">Type of items in collection.</typeparam>
            <param name="collection">Collection to add to.</param>
            <param name="additions">Elements to add.</param>
        </member>
        <member name="M:UsefulThings.Extensions.Pop``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Removes element from collection at index.
            </summary>
            <typeparam name="T">Type of objects in collection.</typeparam>
            <param name="collection">Collection to remove from.</param>
            <param name="index">Index to remove from.</param>
            <returns>Removed element.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts enumerable to List in a more memory efficient way by providing size of list.
            </summary>
            <typeparam name="T">Type of elements in lists.</typeparam>
            <param name="enumerable">Enumerable to convert to list.</param>
            <param name="size">Size of list.</param>
            <returns>List containing enumerable contents.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts enumerable to array in a more memory efficient way by providing size of list.
            </summary>
            <typeparam name="T">Type of elements in list.</typeparam>
            <param name="enumerable">Enumerable to convert to array.</param>
            <param name="size">Size of lists.</param>
            <returns>Array containing enumerable elements.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Compares strings with culture and case sensitivity.
            </summary>
            <param name="str">Main string to check in.</param>
            <param name="toCheck">Substring to check for in Main String.</param>
            <param name="CompareType">Type of comparison.</param>
            <returns>True if toCheck found in str, false otherwise.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.GetPathWithoutInvalids(System.String)">
            <summary>
            Removes invalid characters from path.
            </summary>
            <param name="str">String to remove chars from.</param>
            <returns>New string containing no invalid characters.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.GetDirParent(System.String,System.Int32)">
            <summary>
            Gets parent directory, optionally to a certain depth (or height?)
            </summary>
            <param name="str">String (hopefully path) to get parent of.</param>
            <param name="depth">Depth to get parent of.</param>
            <returns>Parent of string.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.isDirectory(System.String)">
            <summary>
            Determines if string is a Directory.
            Returns True if directory, false otherwise.
            </summary>
            <param name="str">String to check.</param>
            <returns>True if is a directory, false if not.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.isFile(System.String)">
            <summary>
            Determines if string is a file.
            Returns True if file, false otherwise.
            </summary>
            <param name="str">String to check.</param>
            <returns>True if a file, false if not</returns>
        </member>
        <member name="M:UsefulThings.Extensions.isDigit(System.String)">
            <summary>
            Determines if string is a number.
            </summary>
            <param name="str">String to check.</param>
            <returns>True if string is a number.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.isDigit(System.Char)">
            <summary>
            Determines if character is a number.
            </summary>
            <param name="c">Character to check.</param>
            <returns>True if c is a number.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.isLetter(System.Char)">
            <summary>
            Determines if character is a letter.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:UsefulThings.Extensions.isLetter(System.String)">
            <summary>
            Determines if string is a letter.
            </summary>
            <param name="str">String to check.</param>
            <returns>True if str is a letter.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.AddTextToPage(System.Windows.Documents.FixedPage,System.String)">
            <summary>
            Adds text to a FixedPage.
            </summary>
            <param name="page">Page to add text to.</param>
            <param name="text">Text to add.</param>
        </member>
        <member name="M:UsefulThings.Extensions.AddPageFromText(System.Windows.Documents.FixedDocument,System.String)">
            <summary>
            Add page to a FixedDocument from string.
            </summary>
            <param name="document">Document to add to.</param>
            <param name="text">Text to add as page.</param>
        </member>
        <member name="M:UsefulThings.Extensions.AddPageFromFile(System.Windows.Documents.FixedDocument,System.String)">
            <summary>
            Add page to a FixedDocument from a file.
            </summary>
            <param name="document">Document to add to.</param>
            <param name="filename">Filename to load from.</param>
            <returns>Null if successful, error as string otherwise.</returns>
        </member>
        <member name="M:UsefulThings.Extensions.BeginAdjustableAnimation(System.Windows.ContentElement,System.Windows.DependencyProperty,UsefulThings.WPF.GridLengthAnimation,System.Object)">
            <summary>
            Begins an animation that automatically sets final value to be held. Used with FillType.Stop rather than default FillType.Hold.
            </summary>
            <param name="element">Content Element to animate.</param>
            <param name="anim">Animation to use on element.</param>
            <param name="dp">Property of element to animate using anim.</param>
            <param name="To">Final value of element's dp.</param>
        </member>
        <member name="M:UsefulThings.Extensions.BeginAdjustableAnimation(System.Windows.ContentElement,System.Windows.DependencyProperty,UsefulThings.WPF.GridLengthAnimation)">
            <summary>
            Begins adjustable animation for a GridlengthAnimation. 
            Holds animation end value without Holding it. i.e. Allows it to change after animation without resetting it. Should be possible in WPF...maybe it is.
            </summary>
            <param name="element">Element to start animation on.</param>
            <param name="dp">Property to animate.</param>
            <param name="anim">Animation to perform. GridLengthAnimation only for now.</param>
        </member>
        <member name="T:UsefulThings.General">
            <summary>
            KFreon: General C# helpers
            </summary>
        </member>
        <member name="T:UsefulThings.General.StreamBitConverter">
            <summary>
            Does bit conversion from streams
            </summary>
        </member>
        <member name="M:UsefulThings.General.StreamBitConverter.ToUInt32(System.IO.Stream,System.Int32)">
            <summary>
            Reads a UInt32 from a stream at given offset.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="offset">Offset to start reading from in stream.</param>
            <returns>Number read from stream.</returns>
        </member>
        <member name="M:UsefulThings.General.DecompressStream(System.IO.Stream)">
            <summary>
            Decompresses stream using GZip. Returns decompressed Stream.
            Returns null if stream isn't compressed.
            </summary>
            <param name="compressedStream">Stream compressed with GZip.</param>
        </member>
        <member name="M:UsefulThings.General.CompressStream(System.IO.Stream,System.IO.Compression.CompressionLevel)">
            <summary>
            Compresses stream with GZip. Returns new compressed stream.
            </summary>
            <param name="DecompressedStream">Stream to compress.</param>
            <param name="compressionLevel">Level of compression to use.</param>
        </member>
        <member name="M:UsefulThings.General.GetFileSizeAsString(System.Double,System.Boolean)">
            <summary>
            Converts given double to filesize with appropriate suffix.
            </summary>
            <param name="size">Size in bytes.</param>
        </member>
        <member name="M:UsefulThings.General.GetExtsAsFilter(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Gets file extensions as filter string for SaveFileDialog and OpenFileDialog as a SINGLE filter entry.
            </summary>
            <param name="exts">List of extensions to use.</param>
            <param name="filterName">Name of filter entry. e.g. 'Images|*.jpg;*.bmp...', Images is the filter name</param>
            <returns>Filter string from extensions.</returns>
        </member>
        <member name="M:UsefulThings.General.GetExtsAsFilter(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Gets file extensions as filter string for SaveFileDialog and OpenFileDialog as MULTIPLE filter entries.
            </summary>
            <param name="exts">List of file extensions. Must have same number as filterNames.</param>
            <param name="filterNames">List of file names. Must have same number as exts.</param>
            <returns>Filter string of names and extensions.</returns>
        </member>
        <member name="M:UsefulThings.General.GetVersion">
            <summary>
            Gets version of assembly calling this function.
            </summary>
            <returns>String of assembly version.</returns>
        </member>
        <member name="M:UsefulThings.General.GetExecutingLoc">
            <summary>
            Gets location of assembly calling this function.
            </summary>
            <returns>Path to location.</returns>
        </member>
        <member name="M:UsefulThings.General.ReadTextFromFile(System.String,System.String@)">
            <summary>
            Read text from file as single string.
            </summary>
            <param name="filename">Path to filename.</param>
            <param name="result">Contents of file.</param>
            <returns>Null if successful, error as string otherwise.</returns>
        </member>
        <member name="M:UsefulThings.General.ReadLinesFromFile(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Reads lines of file into List.
            </summary>
            <param name="filename">File to read from.</param>
            <param name="Lines">Contents of file.</param>
            <returns>Null if success, error message otherwise.</returns>
        </member>
        <member name="M:UsefulThings.General.GetExternalData(System.String,System.Int32,System.Int32)">
            <summary>
            Gets external image data as byte[] with some buffering i.e. retries if fails up to 20 times.
            </summary>
            <param name="file">File to get data from.</param>
            <param name="OnFailureSleepTime">Time (in ms) between attempts for which to sleep.</param>
            <param name="retries">Number of attempts to read.</param>
            <returns>byte[] of image.</returns>
        </member>
        <member name="T:UsefulThings.MemoryTributary">
            <summary>
            MemoryTributary is a re-implementation of MemoryStream that uses a dynamic list of byte arrays as a backing store, instead of a single byte array, the allocation
            of which will fail for relatively small streams as it requires contiguous memory.
            </summary>
        </member>
        <member name="M:UsefulThings.MemoryTributary.#ctor">
            <summary>
            Creates an empty MemoryStream-like instance which doesn't require contiguous memory.
            </summary>
        </member>
        <member name="M:UsefulThings.MemoryTributary.#ctor(System.Byte[])">
            <summary>
            Creates a MemoryStream-like instance which doesn't require contiguous memory, based on a byte[] source.
            </summary>
        </member>
        <member name="M:UsefulThings.MemoryTributary.#ctor(System.Int32)">
            <summary>
            Creates a MemoryStream-like instance which doesn't require contiguous memory, with length (ignored).
            </summary>
        </member>
        <member name="P:UsefulThings.MemoryTributary.block">
            <summary>
            The block of memory currently addressed by Position
            </summary>
        </member>
        <member name="P:UsefulThings.MemoryTributary.blockId">
            <summary>
            The id of the block currently addressed by Position
            </summary>
        </member>
        <member name="P:UsefulThings.MemoryTributary.blockOffset">
            <summary>
            The offset of the byte currently addressed by Position, into the block that contains it
            </summary>
        </member>
        <member name="M:UsefulThings.MemoryTributary.Flush">
            <summary>
            Does nothing for now.
            </summary>
        </member>
        <member name="M:UsefulThings.MemoryTributary.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from this stream at the current position TO the buffer.
            Doesn't reset stream position.
            Returns number of bytes read from stream.
            </summary>
            <param name="buffer">Destination array.</param>
            <param name="offset">Offset to begin writing at in buffer></param>
            <param name="count">Number of bytes to read from stream></param>
        </member>
        <member name="M:UsefulThings.MemoryTributary.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Changes stream position to given offset based on given origin.
            Returns new stream position.
            </summary>
            <param name="offset">Desired offset from origin.</param>
            <param name="origin">Origin to base offset on.</param>
        </member>
        <member name="M:UsefulThings.MemoryTributary.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data FROM buffer TO stream at current position. 
            Doesn't reset stream position.
            </summary>
            <param name="buffer">Buffer containing data.</param>
            <param name="offset">Offset to begin writing from in buffer.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:UsefulThings.MemoryTributary.ReadByte">
            <summary>
            Reads byte from stream at current position and advances stream.
            </summary>
        </member>
        <member name="M:UsefulThings.MemoryTributary.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream at current position and advances stream.
            </summary>
            <param name="value">Byte to write to stream.</param>
        </member>
        <member name="M:UsefulThings.MemoryTributary.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:UsefulThings.MemoryTributary.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source stream into the this instance at the current position.
            </summary>
            <param name="source">The stream containing the data to copy</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="M:UsefulThings.MemoryTributary.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire stream into destination, regardless of Position, which remains unchanged.
            </summary>
            <param name="destination">The stream to write the content of this stream to</param>
        </member>
        <member name="T:UsefulThings.WinForms.BackBone">
            <summary>
            Backbone factory for queuing and running tasks threadsafely. Also allows things to be run before and after each job.
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.BackBone.#ctor(System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>
            Constructor for backbone. 
            </summary>
            <param name="First">Function to be run before each job.</param>
            <param name="Last">Function to be run after each job.</param>
        </member>
        <member name="M:UsefulThings.WinForms.BackBone.AddToBackBone(System.Func{System.Boolean,System.Boolean})">
            <summary>
            Adds job to backbone.
            </summary>
            <param name="job">Job to be added to queue.</param>
        </member>
        <member name="T:UsefulThings.WinForms.Gooey">
            <summary>
            Allows some control over changing the state (enabled/visible) of a set of controls.
            Features:
                Exclude controls from state changes.
                Switch state changes between enabling and changing visibility.
                A function can replace state changes. e.g. Instead of enabling, set some text or whatever.
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.Gooey.ChangeState(System.Boolean)">
            <summary>
            Changes state of all listed controls.
            </summary>
            <param name="state">If true, enables/makes visible. Functions run regardless and take state as parameter.</param>
        </member>
        <member name="M:UsefulThings.WinForms.Gooey.AddControl(System.Object,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds given control to list of controls to be maintained by this class.
            </summary>
            <param name="control">Control to be added (ToolStripItem or Form Control)</param>
            <param name="key">Key to identify control. MUST be a unique part of the Control name.</param>
            <param name="stateChangeEffect">Effect to be run on state change. Bool or Action.</param>
            <param name="affectedByStateChange">Optional. If true, this control is affected by state changes.</param>
            <param name="trueIsEnabledProperty">Optional. If true, property affected by state changes is the Enabled property, otherwise uses the visible property.</param>
            <returns></returns>
        </member>
        <member name="M:UsefulThings.WinForms.Gooey.ModifyControl(System.String,System.Boolean)">
            <summary>
            Modifies control specified by key, changes whether control is affected by state changes.
            </summary>
            <param name="key">Key of control to change.</param>
            <param name="AffectedByStateChange">If true, control is affected by state changes.</param>
        </member>
        <member name="M:UsefulThings.WinForms.Gooey.GetControlAffectedState(System.String)">
            <summary>
            Gets whether control specified by key is affected by state changes.
            </summary>
            <param name="key">Key of control to look for.</param>
            <returns>True if control is affected by state changes, else false.</returns>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.KFreonMessageBox.#ctor(System.String,System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.String,System.String)">
            <summary>
            Provides a more customisable MessageBox with 3 buttons available. 
            DialogResults: Button1 = OK, button2 = Abort, button3 = Cancel.
            </summary>
            <param name="Title">String to display as title.</param>
            <param name="Message">String to display in the window.</param>
            <param name="Button1Text">First button text.</param>
            <param name="Button2Text">Second button text.</param>
            <param name="Button3Text">Third button text.</param>
            <param name="icon">Icon to display.</param>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.KFreonMessageBox.GetSystemImageForMessageBox(System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Converts a MessageBoxIcon to a Bitmap cos that's the only thing the ImageBox can display.
            </summary>
            <param name="icon">MessageBox icon to convert.</param>
            <returns>Bitmap version of Icon.</returns>
        </member>
        <member name="F:UsefulThings.WinForms.UsefulForms.KFreonMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.KFreonMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.KFreonMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UsefulThings.WinForms.UsefulForms.SelectionForm">
            <summary>
            Provides an interface to select some items from a list of items. 
            Provides a method to have an action for changing selected index.
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.SelectionForm.#ctor(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Action)">
            <summary>
            Contstructor.
            </summary>
            <param name="names">Items to display.</param>
            <param name="Description">Window message to display above selection list.</param>
            <param name="Title">Window title.</param>
            <param name="SelectAll">If true, all items are selected.</param>
            <param name="SelectedIndChanged">Action to perform on selection changed event.</param>
        </member>
        <member name="F:UsefulThings.WinForms.UsefulForms.SelectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.SelectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UsefulThings.WinForms.UsefulForms.SelectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UsefulThings.WinForms.ProgressBarChanger">
            <summary>
            Provides threadsafe methods for changing ToolStripProgressBars, incl Incrementing and setting Value and Maximum properties.
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.ProgressBarChanger.#ctor(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripProgressBar)">
            <summary>
            Contructor.
            </summary>
            <param name="strip">Base strip object for correct invoking.</param>
            <param name="progbar">ProgressBar to be targeted.</param>
        </member>
        <member name="M:UsefulThings.WinForms.ProgressBarChanger.IncrementBar(System.Int32)">
            <summary>
            Increments targeted ProgressBar.
            </summary>
            <param name="amount">Optional. Amount to increment bar by. Defaults to 1.</param>
        </member>
        <member name="M:UsefulThings.WinForms.ProgressBarChanger.ChangeProgressBar(System.Int32,System.Int32)">
            <summary>
            Sets Value and Maximum properties of targeted ProgressBar.
            </summary>
            <param name="start">Value to set Value property to. i.e. Current value.</param>
            <param name="end">Value to set Maximum property to. i.e. Number of increments in bar.</param>
        </member>
        <member name="T:UsefulThings.WinForms.TextUpdater">
            <summary>
            Provides threadsafe methods to update text of a ToolStripItem's Text property. 
            </summary>
        </member>
        <member name="M:UsefulThings.WinForms.TextUpdater.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor using a Control like a TextBox. Unused for now.
            </summary>
            <param name="givenControl">Control to alter.</param>
        </member>
        <member name="M:UsefulThings.WinForms.TextUpdater.#ctor(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)">
            <summary>
            Constructor for given ToolStripItem.
            </summary>
            <param name="givenControl">Control to monitor.</param>
            <param name="givenStrip">Base strip to correctly invoke with.</param>
        </member>
        <member name="M:UsefulThings.WinForms.TextUpdater.UpdateText(System.String)">
            <summary>
            Updates text of targeted text property.
            </summary>
            <param name="text">New text to display.</param>
        </member>
        <member name="M:UsefulThings.WinForms.Misc.SaveImage(System.Drawing.Image,System.String)">
            <summary>
            Saves given image to file.
            </summary>
            <param name="image">Image to save.</param>
            <param name="savepath">Path to save image to.</param>
            <returns>True if saved successfully. False if failed or already exists.</returns>
        </member>
        <member name="M:UsefulThings.WinForms.Misc.resizeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Salts resize image function. Returns resized image.
            </summary>
            <param name="imgToResize">Image to resize</param>
            <param name="size">Size to shape to</param>
            <returns>Resized image as an Image.</returns>
        </member>
        <member name="T:UsefulThings.WPF.CommandHandler">
            <summary>
            Creates a command in an easy manner. Not my code.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.CommandHandler.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="canExecute">If true, can perform command/action.</param>
        </member>
        <member name="M:UsefulThings.WPF.CommandHandler.#ctor(System.Action,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="action">Action to perform WITHOUT arguments.</param>
            <param name="canExecute">true = command can be performed.</param>
        </member>
        <member name="M:UsefulThings.WPF.CommandHandler.#ctor(System.Action{System.Object},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="action">Action to perform WITH arguments.</param>
            <param name="canExecute">true = command can be performed.</param>
        </member>
        <member name="M:UsefulThings.WPF.CommandHandler.CanExecute(System.Object)">
            <summary>
            Changes "enabled" status of command.
            </summary>
            <param name="parameter">CURRENTLY NOT USED</param>
            <returns>CanExecute status</returns>
        </member>
        <member name="M:UsefulThings.WPF.CommandHandler.Execute(System.Object)">
            <summary>
            Executes command.
            </summary>
            <param name="parameter">Parameter to give to Action. Can be null.</param>
        </member>
        <member name="T:UsefulThings.WPF.GridLengthAnimation">
            <summary>
            Animates Grid properties. Not mine.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.MTObservableCollection`1">
            <summary>
            Provides a threadsafe ObservableCollection of T
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTObservableCollection`1.ClearItems">
            <summary>
            Clear all items
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves an item
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTObservableCollection`1.ToSyncArray">
            <summary>
            Return as a cloned copy of this Collection
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.MTRangedObservableCollection`1">
            <summary>
            Adaptation of Multithreaded ObservableCollection to allow range operations.
            </summary>
            <typeparam name="T">Type of content.</typeparam>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="collection">Enumerable to initialise with.</param>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to initialise with.</param>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds range of elements from IEnumerable.
            </summary>
            <param name="enumerable">Enumerable of elements to add.</param>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts elements at given index.
            </summary>
            <param name="index">Index to add at.</param>
            <param name="enumerable">Elements to add.</param>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.NotifyRangeChange">
            <summary>
            Notifications of property changes.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.MTRangedObservableCollection`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears collection and adds elements from enumerable.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="T:UsefulThings.WPF.MultiIntConverter">
            <summary>
            Checks if multiple integers are equal.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.MutuallyExclusiveCheckersConverter">
            <summary>
            Used for when two checkboxes are mutually exclusive, but can both be false.
            So, when one goes true, the other goes false, but if both go false, nothing changes.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.RangedObservableCollection`1">
            <summary>
            Adaptation of ObservableCollection to allow ranged operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.#ctor">
            <summary>
            Base Constructor.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="collection">Enumerable to initialise with.</param>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to initialise with.</param>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds range of elements.
            </summary>
            <param name="enumerable">Elements to add.</param>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts elements at given index.
            </summary>
            <param name="index">Index to add at.</param>
            <param name="enumerable">Elements to add.</param>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.NotifyRangeChange">
            <summary>
            Notifications of property changes.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.RangedObservableCollection`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears collection and adds elements from enumerable.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="T:UsefulThings.WPF.StringToIntConverter">
            <summary>
            Converts between strings and integers.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.StringToUriConverter">
            <summary>
            Converts string to URI.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.TextBoxValidation">
            <summary>
            Deals with simple path validation.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.ViewModelBase">
            <summary>
            Base class for view models. Provides basic property setting and PropertyChanged notifications.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.ViewModelBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners when given property is updated.
            </summary>
            <param name="propertyname">Name of property to give notification for. If called in property, argument can be ignored as it will be default.</param>
        </member>
        <member name="M:UsefulThings.WPF.ViewModelBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets given property and notifies listeners of its change. IGNORES setting the property to same value.
            Should be called in property setters.
            </summary>
            <typeparam name="T">Type of given property.</typeparam>
            <param name="field">Backing field to update.</param>
            <param name="value">New value of property.</param>
            <param name="propertyName">Name of property.</param>
            <returns>True if success, false if backing field and new value aren't compatible.</returns>
        </member>
        <member name="T:UsefulThings.WPF.VirtualizingWrapPanel">
            <summary>
            Provides virtualising WrapPanel implementation. Not Mine (virtualisingwrappanel.codeplex or something), and has some issues.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.VisibilitySourceNullConverter">
            <summary>
            Converts nullable item to visibility and back. If item is null, visibility is collapsed, otherwise visible.
            </summary>
        </member>
        <member name="T:UsefulThings.WPF.Images">
            <summary>
            Provides functions to work with WPF Images
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.Images.CreateWPFBitmap(System.IO.Stream,System.Int32,System.Int32,System.Windows.Media.Imaging.BitmapCacheOption,System.Boolean)">
            <summary>
            Creates a WPF style Bitmap (i.e. not using the System.Drawing.Bitmap)
            </summary>
            <param name="source">Stream containing bitmap data. NOTE fully formatted bitmap file, not just data.</param>
            <param name="cacheOption">Determines how/when image data is cached. Default is "Cache to memory on load."</param>
            <param name="decodeWidth">Specifies width to decode to. Aspect ratio preserved if only this set.</param>
            <param name="decodeHeight">Specifies height to decode to. Aspect ratio preserved if only this set.</param>
            <returns>Bitmap from stream.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Images.CreateWPFBitmap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates WPF Bitmap from byte array.
            </summary>
            <param name="source">Fully formatted bitmap in byte[]</param>
            <param name="decodeWidth">Specifies width to decode to. Aspect ratio preserved if only this set.</param>
            <param name="decodeHeight">Specifies height to decode to. Aspect ratio preserved if only this set.</param>
            <returns>BitmapImage object.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Images.CreateWPFBitmap(System.Collections.Generic.List{System.Byte},System.Int32,System.Int32)">
            <summary>
            Creates WPF Bitmap from List of bytes.
            </summary>
            <param name="source">Fully formatted bitmap in List of bytes.</param>
            <param name="decodeWidth">Specifies width to decode to. Aspect ratio preserved if only this set.</param>
            <param name="decodeHeight">Specifies height to decode to. Aspect ratio preserved if only this set.</param>
            <returns>BitmapImage of source data.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Images.CreateWPFBitmap(System.String,System.Int32,System.Int32)">
            <summary>
            Creates WPF Bitmap from a file.
            </summary>
            <param name="Filename">Path to file.</param>
            <param name="decodeWidth">Specifies width to decode to. Aspect ratio preserved if only this set.</param>
            <param name="decodeHeight">Specifies height to decode to. Aspect ratio preserved if only this set.</param>
            <returns>BitmapImage based on file.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Images.SaveWPFBitmapToDiskAsJPG(System.Windows.Media.Imaging.BitmapImage,System.String)">
            <summary>
            Saves WPF bitmap to disk as a JPG.
            </summary>
            <param name="img">Image to save.</param>
            <param name="Destination">Path to save to.</param>
        </member>
        <member name="T:UsefulThings.WPF.Documents">
            <summary>
            Provides functions to work with WPF Documents
            </summary>
        </member>
        <member name="M:UsefulThings.WPF.Documents.CreateFixedPage(System.String)">
            <summary>
            Creates a FixedPage from string.
            </summary>
            <param name="text">Text of page.</param>
            <returns>FixedPage from text.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Documents.GeneratePageFromFile(System.String,System.String@)">
            <summary>
            Builds a PageContent object from file. 
            PageContent goes into FixedDocument.
            </summary>
            <param name="filename">Path of file to read from.</param>
            <param name="err">Error container.</param>
            <returns>PageContent oject from file.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Documents.GeneratePageFromText(System.String)">
            <summary>
            Builds a PageContent object from string.
            PageContent goes into FixedDocument.
            </summary>
            <param name="text">Text for page.</param>
            <returns>PageContent from text.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Documents.GenerateFixedDocumentFromFile(System.String,System.String@)">
            <summary>
            Builds FixedDocument from file.
            </summary>
            <param name="filename">Path of file to use.</param>
            <param name="err">Error container.</param>
            <returns>FixedDocument of file.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Documents.GenerateFixedDocumentFromText(System.String)">
            <summary>
            Builds FixedDocument from string.
            </summary>
            <param name="text">Text to use.</param>
            <returns>FixedDocument of text.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Documents.GenerateFlowDocumentFromFile(System.String,System.String@)">
            <summary>
            Builds a FlowDocument from file.
            </summary>
            <param name="filename">Path to file.</param>
            <param name="err">Error container.</param>
            <returns>FlowDocument of file.</returns>
        </member>
        <member name="M:UsefulThings.WPF.Documents.GenerateFlowDocumentFromText(System.String)">
            <summary>
            Builds FlowDocument from text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:UsefulThings.WrappingCollection`1">
            <summary>
            This Collection wraps its index such that if length = 2, and the call is list[6], the collection would return the first element. 
            Negative indicies are also supported (maybe)
            </summary>
            <typeparam name="T">Type of elements in collection</typeparam>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="enumerable">Enumerable to initialise with.</param>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="collection">Collection to initialise with.</param>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.Add(`0)">
            <summary>
            Adds item to list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.Clear">
            <summary>
            Clears list.
            </summary>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.Contains(`0)">
            <summary>
            Checks if item is in list.
            </summary>
            <param name="item">Item to check.</param>
            <returns>true if item is in list, else false.</returns>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies contents of list to array at arrayIndex.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Index in array to start copying at.</param>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.Remove(`0)">
            <summary>
            Removes item from list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.GetEnumerator">
            <summary>
            Gets enumerator for list.
            </summary>
            <returns>Enumerator of list.</returns>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator for list.
            </summary>
            <returns>Enumerator of list.</returns>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.IndexOf(`0)">
            <summary>
            Returns index of item in list.
            </summary>
            <param name="item">Item to get index of.</param>
            <returns>Index of item in list.</returns>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts item into list at index. Wraps index if required.
            </summary>
            <param name="index">Index of item to add.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at given index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="P:UsefulThings.WrappingCollection`1.Item(System.Int32)">
            <summary>
            Indexer. Works on item at wrappable index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:UsefulThings.WrappingCollection`1.WrapIndex(System.Int32)">
            <summary>
            Wraps the index using the mod operator to determine if the index is larger than the list and alters it so it's in range.
            </summary>
            <param name="index">Index to wrap to list size.</param>
            <returns>Index valid for list size.</returns>
        </member>
    </members>
</doc>
